'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _walk = require('walk');

var _walk2 = _interopRequireDefault(_walk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let Loader = class Loader {

  constructor(rootPath) {
    this.rootPath = rootPath;
    this.registry = {};
  }

  require(fullModuleName) {
    var _fullModuleName$split = fullModuleName.split(':');

    var _fullModuleName$split2 = _slicedToArray(_fullModuleName$split, 2);

    const namespace = _fullModuleName$split2[0];
    const moduleName = _fullModuleName$split2[1];


    const module = require(`${ this.rootPath }/${ namespace }s/${ moduleName }`).default;

    this.register(fullModuleName, module);

    return module;
  }

  requireNpm(moduleName) {
    const module = require(`${ this.rootPath }/../node_modules/${ moduleName }`);

    return module;
  }

  register(name, instance) {
    this.registry[name] = instance;
  }

  make(moduleName) {
    const existing = this.registry[moduleName];

    return existing ? existing : this.require(moduleName);
  }

  pathsForNamespace(namespace) {
    const dir = `${ this.rootPath }/${ namespace }`;
    const files = [];

    const options = {
      listeners: {
        names: function names(root, nodeNamesArray) {
          nodeNamesArray.forEach(node => {
            const matches = node.match(/(.*)(\.js|\.json)$/);

            if (matches) {
              files.push({
                fullPath: `${ root }/${ node }`,
                fileName: node,
                module: matches[1]
              });
            }
          });
        }
      }
    };

    _walk2.default.walkSync(dir, options);

    return files;
  }
};
exports.default = Loader;