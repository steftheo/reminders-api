'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
let Action = class Action {

  /**
   * Express Response Object
   */


  constructor(app) {
    this.hasSent = false;

    this.app = app;
  }

  /**
   * Sets the status code for the current response object
   */


  /**
   * Express Request Object
   */
  setStatus() {
    this.response.status(...arguments);
  }

  /**
   * Sends the arguments using `this.response.send`
   * and breaks the promise chain
   *
   * @param  {mixed} data
   * @return {[type]}      [description]
   */
  send(data) {
    console.log(`Response already sent. Not sending again`);

    if (!this.hasSent) {
      this.hasSent = true;
      return this.response.send(data);
    }
  }

  /**
   * Simplified promise aware hook for finding data
   * @return {any} POJO or Promise of data
   */
  data() {}

  /**
   * User defined action handler
   * Promise aware
   */
  handle() {
    return this.data();
  }

  handleError() {
    let d = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    let status = 500;

    if (d.status && typeof d.status === 'number') {
      status = d.status;
    }
    console.log(d);

    this.setStatus(status);
    this.send({
      message: `There was an error`
    });
  }

  runHook(lastResult, hook) {
    if (this.hasSent) {
      return null;
    }

    return hook.call(this, lastResult);
  }

  createMiddleware() {
    return (req, res) => {
      this.hasSent = false;
      this.request = req;
      this.response = res;

      const hooks = [this.beforeAll, ...this.beforeHooks, this.before, this.handle, this.after, ...this.afterHooks, this.afterAll];

      const finalResult = hooks.reduce((carry, curr) => {
        return curr ? carry.then(result => this.runHook(result, curr)) : carry;
      }, Promise.resolve());

      finalResult.then(result => {
        this.send(result);
      }).catch(e => {
        this.handleError(e);
      });
    };
  }

  static boot(app) {
    const instance = new this(app);

    return instance.createMiddleware();
  }
};
exports.default = Action;


Action.prototype.beforeHooks = [];
Action.prototype.afterHooks = [];