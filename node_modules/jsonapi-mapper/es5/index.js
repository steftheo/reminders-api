'use strict';
var _ = require('lodash');
var validator = require('validator');
var Serializer = require('jsonapi-serializer');
var adapters = require('./lib/adapters/adapters');
var Translator = (function () {
    /**
     * Constructor that initializes a new instance of ohMyJSONAPI
     * with the desired adapter. If no adapter is passed
     * @param  {[type]} adapterName [description]
     * @param baseUrl
     * @param serializerOptions
     * @return {[type]}         [description]
     */
    function Translator(adapterName, baseUrl, serializerOptions) {
        // Lookup and set the adapter if it exists
        this.adapter = _lookupAdapter(adapterName);
        // Trim and set the baseUrl, if it exists.
        this.baseUrl = validator.isURL(baseUrl) ? _.trimRight(baseUrl, '/') : '';
        // Set default serializer options.
        this.serializerOptions = serializerOptions;
    }
    /**
     * Provides access to a new instance of the raw serializer. For more information
     * on options, please see https://github.com/SeyZ/jsonapi-serializer.
     * @param type
     * @param data
     * @param options
     */
    Translator.serializer = function (type, data, options) {
        return new Serializer(type, data, options);
    };
    /**
     * Serializes the data using the specified adapter.
     * @param  {[type]} data this will
     * @param  {[type]} type [description]
     * @param options
     * @return {[type]}      [description]
     */
    Translator.prototype.toJSONAPI = function (data, type, options) {
        if (options === void 0) { options = {
            relations: true
        }; }
        if (!data) {
            throw new Error('toJSONAPI(): `data` is required.');
        }
        if (!type) {
            throw new Error('toJSONAPI(): `type` is required.');
        }
        // Use adapter serializer or raw serializer depending if it was set
        if (this.adapter) {
            return this.adapter(data, type, this.baseUrl, this.serializerOptions, options);
        }
        else {
            return Translator.serializer(type, data, this.serializerOptions);
        }
    };
    return Translator;
})();
exports.Translator = Translator;
/**
 * Looks up and returns the specified Adapter.
 * @param adapterName
 * @private
 */
function _lookupAdapter(adapterName) {
    var adapter = adapters[adapterName];
    if (!adapter) {
        throw new Error('Invalid adapter. Please choose from [bookshelf]');
    }
    return adapter;
}
//# sourceMappingURL=index.js.map